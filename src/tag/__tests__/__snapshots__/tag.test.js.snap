// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Stateless tag should render component: Component has correct render 1`] = `
<Tag
  closeable={true}
  disabled={false}
  isFocused={false}
  isHovered={false}
  kind="primary"
  onActionClick={[MockFunction]}
  onActionKeyDown={[Function]}
  onClick={null}
  onKeyDown={null}
  overrides={Object {}}
  variant="light"
>
  <ForwardRef
    $clickable={false}
    $closeable={true}
    $disabled={false}
    $isFocusVisible={false}
    $isFocused={false}
    $isHovered={false}
    $kind="primary"
    $variant="light"
    aria-disabled={null}
    aria-label="Some tag, close by backspace"
    data-baseweb="tag"
    onBlur={[Function]}
    onClick={null}
    onFocus={[Function]}
    onKeyDown={[Function]}
    role="button"
    tabIndex={0}
  >
    <MockStyledComponent
      $clickable={false}
      $closeable={true}
      $disabled={false}
      $isFocusVisible={false}
      $isFocused={false}
      $isHovered={false}
      $kind="primary"
      $variant="light"
      aria-disabled={null}
      aria-label="Some tag, close by backspace"
      data-baseweb="tag"
      forwardedRef={null}
      onBlur={[Function]}
      onClick={null}
      onFocus={[Function]}
      onKeyDown={[Function]}
      role="button"
      tabIndex={0}
    >
      <span
        aria-disabled={null}
        aria-label="Some tag, close by backspace"
        data-baseweb="tag"
        onBlur={[Function]}
        onClick={null}
        onFocus={[Function]}
        onKeyDown={[Function]}
        role="button"
        styled-component="true"
        tabIndex={0}
        test-style={
          Object {
            ":focus": Object {
              "boxShadow": "none",
            },
            ":hover": Object {},
            "alignItems": "center",
            "backgroundColor": "$theme.colors.tagPrimaryLightBackground",
            "borderBottomLeftRadius": "$theme.borders.radius400",
            "borderBottomRightRadius": "$theme.borders.radius400",
            "borderColor": null,
            "borderStyle": "solid",
            "borderTopLeftRadius": "$theme.borders.radius400",
            "borderTopRightRadius": "$theme.borders.radius400",
            "borderWidth": 0,
            "boxSizing": "border-box",
            "color": "$theme.colors.tagPrimaryLightFont",
            "cursor": "default",
            "display": "inline-flex",
            "fontFamily": "$theme.typography.font150.fontFamily",
            "fontSize": "$theme.typography.font150.fontSize",
            "fontWeight": "$theme.typography.font150.fontWeight",
            "height": "$theme.sizing.scale800",
            "justifyContent": "space-between",
            "lineHeight": "$theme.typography.font150.lineHeight",
            "marginBottom": "5px",
            "marginLeft": "5px",
            "marginRight": "5px",
            "marginTop": "5px",
            "outline": "none",
            "paddingBottom": "$theme.sizing.scale0",
            "paddingLeft": "$theme.sizing.scale500",
            "paddingRight": null,
            "paddingTop": "$theme.sizing.scale0",
          }
        }
      >
        <ForwardRef
          title="Some tag"
        >
          <MockStyledComponent
            forwardedRef={null}
            title="Some tag"
          >
            <span
              styled-component="true"
              test-style={
                Object {
                  "maxWidth": "$theme.sizing.scale3200",
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                }
              }
              title="Some tag"
            >
              Some tag
            </span>
          </MockStyledComponent>
        </ForwardRef>
        <ForwardRef
          $clickable={false}
          $closeable={true}
          $disabled={false}
          $isFocusVisible={false}
          $isFocused={false}
          $isHovered={false}
          $kind="primary"
          $variant="light"
          aria-hidden={true}
          onClick={[Function]}
          role="presentation"
        >
          <MockStyledComponent
            $clickable={false}
            $closeable={true}
            $disabled={false}
            $isFocusVisible={false}
            $isFocused={false}
            $isHovered={false}
            $kind="primary"
            $variant="light"
            aria-hidden={true}
            forwardedRef={null}
            onClick={[Function]}
            role="presentation"
          >
            <span
              aria-hidden={true}
              onClick={[Function]}
              role="presentation"
              styled-component="true"
              test-style={
                Object {
                  ":hover": Object {
                    "backgroundColor": "$theme.colors.tagPrimaryLightActive",
                    "color": "$theme.colors.tagPrimaryLightFontHover",
                  },
                  "alignItems": "center",
                  "borderBottomRightRadius": "$theme.borders.radius400",
                  "borderTopRightRadius": "$theme.borders.radius400",
                  "cursor": "pointer",
                  "display": "flex",
                  "marginLeft": "8px",
                  "outline": "none",
                  "paddingBottom": "7px",
                  "paddingLeft": "8px",
                  "paddingRight": "8px",
                  "paddingTop": "7px",
                  "transitionDuration": "background-color",
                  "transitionProperty": "all",
                  "transitionTimingFunction": "$theme.animation.easeOutCurve",
                }
              }
            >
              <ForwardRef
                fill="none"
                height="10"
                viewBox="0 0 8 8"
                width="10"
                xmlns="http://www.w3.org/2000/svg"
              >
                <MockStyledComponent
                  fill="none"
                  forwardedRef={null}
                  height="10"
                  viewBox="0 0 8 8"
                  width="10"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <svg
                    fill="none"
                    height="10"
                    styled-component="true"
                    test-style={Object {}}
                    viewBox="0 0 8 8"
                    width="10"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      clipRule="evenodd"
                      d="M0.861278 0.862254C1.12163 0.601905 1.54374 0.601905 1.80409 0.862254L3.99935 3.05752L6.19461 0.862254C6.45496 0.601905 6.87707 0.601905 7.13742 0.862254C7.39777 1.1226 7.39777 1.54471 7.13742 1.80506L4.94216 4.00033L7.13742 6.19559C7.39777 6.45594 7.39777 6.87805 7.13742 7.1384C6.87707 7.39875 6.45496 7.39875 6.19461 7.1384L3.99935 4.94313L1.80409 7.1384C1.54374 7.39875 1.12163 7.39875 0.861278 7.1384C0.600928 6.87805 0.600928 6.45594 0.861278 6.19559L3.05654 4.00033L0.861278 1.80506C0.600928 1.54471 0.600928 1.1226 0.861278 0.862254Z"
                      fill="currentColor"
                      fillRule="evenodd"
                    />
                  </svg>
                </MockStyledComponent>
              </ForwardRef>
            </span>
          </MockStyledComponent>
        </ForwardRef>
      </span>
    </MockStyledComponent>
  </ForwardRef>
</Tag>
`;
