// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Block FlexWrap renders flexWrap styling as expected 1`] = `
<Block
  flexWrap={true}
>
  <Block
    flexWrap={true}
    forwardedRef={null}
  >
    <StyledBlock
      $as="div"
      $flexWrap={true}
      data-baseweb="block"
    >
      <MockStyledComponent
        $as="div"
        $flexWrap={true}
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "flexWrap": "wrap",
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;

exports[`Block Overflow renders overflow styling if provided any other value 1`] = `
<Block
  overflow="auto"
>
  <Block
    forwardedRef={null}
    overflow="auto"
  >
    <StyledBlock
      $as="div"
      $overflow="auto"
      data-baseweb="block"
    >
      <MockStyledComponent
        $as="div"
        $overflow="auto"
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "overflow": "auto",
              "overflowX": null,
              "overflowY": null,
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;

exports[`Block Overflow renders overflowX styling if provided with scrollX value 1`] = `
<Block
  overflow="scrollX"
>
  <Block
    forwardedRef={null}
    overflow="scrollX"
  >
    <StyledBlock
      $as="div"
      $overflow="scrollX"
      data-baseweb="block"
    >
      <MockStyledComponent
        $as="div"
        $overflow="scrollX"
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "overflow": null,
              "overflowX": "scroll",
              "overflowY": null,
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;

exports[`Block Overflow renders overflowY styling if provided with scrollY value 1`] = `
<Block
  overflow="scrollY"
>
  <Block
    forwardedRef={null}
    overflow="scrollY"
  >
    <StyledBlock
      $as="div"
      $overflow="scrollY"
      data-baseweb="block"
    >
      <MockStyledComponent
        $as="div"
        $overflow="scrollY"
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "overflow": null,
              "overflowX": null,
              "overflowY": "scroll",
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;

exports[`Block Responsive applies expected styles if responsive array has less than number of breakpoints 1`] = `
<Block
  marginLeft={
    Array [
      "scale100",
      "scale200",
    ]
  }
>
  <Block
    forwardedRef={null}
    marginLeft={
      Array [
        "scale100",
        "scale200",
      ]
    }
  >
    <StyledBlock
      $as="div"
      $marginLeft={
        Array [
          "scale100",
          "scale200",
        ]
      }
      data-baseweb="block"
    >
      <MockStyledComponent
        $as="div"
        $marginLeft={
          Array [
            "scale100",
            "scale200",
          ]
        }
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "@media screen and (min-width: $theme.breakpoints.smallpx)": Object {
                "marginLeft": "$theme.sizing.scale200",
              },
              "marginLeft": "$theme.sizing.scale100",
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;

exports[`Block Responsive applies expected styles if responsive array is provided 1`] = `
<Block
  marginLeft={
    Array [
      "scale100",
      "scale200",
      "scale300",
      "scale400",
    ]
  }
>
  <Block
    forwardedRef={null}
    marginLeft={
      Array [
        "scale100",
        "scale200",
        "scale300",
        "scale400",
      ]
    }
  >
    <StyledBlock
      $as="div"
      $marginLeft={
        Array [
          "scale100",
          "scale200",
          "scale300",
          "scale400",
        ]
      }
      data-baseweb="block"
    >
      <MockStyledComponent
        $as="div"
        $marginLeft={
          Array [
            "scale100",
            "scale200",
            "scale300",
            "scale400",
          ]
        }
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "@media screen and (min-width: $theme.breakpoints.largepx)": Object {
                "marginLeft": "$theme.sizing.scale400",
              },
              "@media screen and (min-width: $theme.breakpoints.mediumpx)": Object {
                "marginLeft": "$theme.sizing.scale300",
              },
              "@media screen and (min-width: $theme.breakpoints.smallpx)": Object {
                "marginLeft": "$theme.sizing.scale200",
              },
              "marginLeft": "$theme.sizing.scale100",
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;

exports[`Block applies expected style rules 1`] = `
<Block
  alignContent="start"
  alignItems="start"
  backgroundAttachment="scroll"
  backgroundClip="border-box"
  backgroundColor="red"
  backgroundImage="linear-gradient(pink, cornflowerblue)"
  backgroundOrigin="border-box"
  backgroundPosition="25% 75%"
  backgroundRepeat="repeat-x"
  backgroundSize="contain"
  bottom="1px"
  color="red"
  display="inline-block"
  flex="grow"
  flexDirection="row"
  grid="100px / 200px"
  gridArea="auto"
  gridAutoColumns="min-content"
  gridAutoFlow="row dense"
  gridAutoRows="20cm"
  gridColumn="1 / 3"
  gridColumnEnd="span 3"
  gridColumnGap="scale800"
  gridColumnStart="span 2"
  gridGap="50px"
  gridRow="1"
  gridRowEnd="2"
  gridRowStart="-1"
  gridTemplate="1fr / 1fr"
  gridTemplateAreas="inherit"
  gridTemplateColumns="1fr 60px"
  gridTemplateRows="auto"
  height="100px"
  justifyContent="start"
  justifyItems="center"
  justifySelf="start"
  left="1px"
  margin="scale200"
  marginBottom="scale200"
  marginLeft="scale200"
  marginRight="scale200"
  marginTop="scale200"
  maxHeight="100px"
  maxWidth="100px"
  minHeight="100px"
  minWidth="100px"
  padding="scale200"
  paddingBottom="scale200"
  paddingLeft="scale200"
  paddingRight="scale200"
  paddingTop="scale200"
  placeContent="end center"
  placeItems="end center"
  placeSelf="center start"
  position="static"
  right="1px"
  top="1px"
  width="100px"
>
  <Block
    alignContent="start"
    alignItems="start"
    backgroundAttachment="scroll"
    backgroundClip="border-box"
    backgroundColor="red"
    backgroundImage="linear-gradient(pink, cornflowerblue)"
    backgroundOrigin="border-box"
    backgroundPosition="25% 75%"
    backgroundRepeat="repeat-x"
    backgroundSize="contain"
    bottom="1px"
    color="red"
    display="inline-block"
    flex="grow"
    flexDirection="row"
    forwardedRef={null}
    grid="100px / 200px"
    gridArea="auto"
    gridAutoColumns="min-content"
    gridAutoFlow="row dense"
    gridAutoRows="20cm"
    gridColumn="1 / 3"
    gridColumnEnd="span 3"
    gridColumnGap="scale800"
    gridColumnStart="span 2"
    gridGap="50px"
    gridRow="1"
    gridRowEnd="2"
    gridRowStart="-1"
    gridTemplate="1fr / 1fr"
    gridTemplateAreas="inherit"
    gridTemplateColumns="1fr 60px"
    gridTemplateRows="auto"
    height="100px"
    justifyContent="start"
    justifyItems="center"
    justifySelf="start"
    left="1px"
    margin="scale200"
    marginBottom="scale200"
    marginLeft="scale200"
    marginRight="scale200"
    marginTop="scale200"
    maxHeight="100px"
    maxWidth="100px"
    minHeight="100px"
    minWidth="100px"
    padding="scale200"
    paddingBottom="scale200"
    paddingLeft="scale200"
    paddingRight="scale200"
    paddingTop="scale200"
    placeContent="end center"
    placeItems="end center"
    placeSelf="center start"
    position="static"
    right="1px"
    top="1px"
    width="100px"
  >
    <StyledBlock
      $alignContent="start"
      $alignItems="start"
      $as="div"
      $backgroundAttachment="scroll"
      $backgroundClip="border-box"
      $backgroundColor="red"
      $backgroundImage="linear-gradient(pink, cornflowerblue)"
      $backgroundOrigin="border-box"
      $backgroundPosition="25% 75%"
      $backgroundRepeat="repeat-x"
      $backgroundSize="contain"
      $bottom="1px"
      $color="red"
      $display="inline-block"
      $flex="grow"
      $flexDirection="row"
      $grid="100px / 200px"
      $gridArea="auto"
      $gridAutoColumns="min-content"
      $gridAutoFlow="row dense"
      $gridAutoRows="20cm"
      $gridColumn="1 / 3"
      $gridColumnEnd="span 3"
      $gridColumnGap="scale800"
      $gridColumnStart="span 2"
      $gridGap="50px"
      $gridRow="1"
      $gridRowEnd="2"
      $gridRowStart="-1"
      $gridTemplate="1fr / 1fr"
      $gridTemplateAreas="inherit"
      $gridTemplateColumns="1fr 60px"
      $gridTemplateRows="auto"
      $height="100px"
      $justifyContent="start"
      $justifyItems="center"
      $justifySelf="start"
      $left="1px"
      $margin="scale200"
      $marginBottom="scale200"
      $marginLeft="scale200"
      $marginRight="scale200"
      $marginTop="scale200"
      $maxHeight="100px"
      $maxWidth="100px"
      $minHeight="100px"
      $minWidth="100px"
      $padding="scale200"
      $paddingBottom="scale200"
      $paddingLeft="scale200"
      $paddingRight="scale200"
      $paddingTop="scale200"
      $placeContent="end center"
      $placeItems="end center"
      $placeSelf="center start"
      $position="static"
      $right="1px"
      $top="1px"
      $width="100px"
      data-baseweb="block"
    >
      <MockStyledComponent
        $alignContent="start"
        $alignItems="start"
        $as="div"
        $backgroundAttachment="scroll"
        $backgroundClip="border-box"
        $backgroundColor="red"
        $backgroundImage="linear-gradient(pink, cornflowerblue)"
        $backgroundOrigin="border-box"
        $backgroundPosition="25% 75%"
        $backgroundRepeat="repeat-x"
        $backgroundSize="contain"
        $bottom="1px"
        $color="red"
        $display="inline-block"
        $flex="grow"
        $flexDirection="row"
        $grid="100px / 200px"
        $gridArea="auto"
        $gridAutoColumns="min-content"
        $gridAutoFlow="row dense"
        $gridAutoRows="20cm"
        $gridColumn="1 / 3"
        $gridColumnEnd="span 3"
        $gridColumnGap="scale800"
        $gridColumnStart="span 2"
        $gridGap="50px"
        $gridRow="1"
        $gridRowEnd="2"
        $gridRowStart="-1"
        $gridTemplate="1fr / 1fr"
        $gridTemplateAreas="inherit"
        $gridTemplateColumns="1fr 60px"
        $gridTemplateRows="auto"
        $height="100px"
        $justifyContent="start"
        $justifyItems="center"
        $justifySelf="start"
        $left="1px"
        $margin="scale200"
        $marginBottom="scale200"
        $marginLeft="scale200"
        $marginRight="scale200"
        $marginTop="scale200"
        $maxHeight="100px"
        $maxWidth="100px"
        $minHeight="100px"
        $minWidth="100px"
        $padding="scale200"
        $paddingBottom="scale200"
        $paddingLeft="scale200"
        $paddingRight="scale200"
        $paddingTop="scale200"
        $placeContent="end center"
        $placeItems="end center"
        $placeSelf="center start"
        $position="static"
        $right="1px"
        $top="1px"
        $width="100px"
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "alignContent": "start",
              "alignItems": "start",
              "backgroundAttachment": "scroll",
              "backgroundClip": "border-box",
              "backgroundColor": "red",
              "backgroundImage": "linear-gradient(pink, cornflowerblue)",
              "backgroundOrigin": "border-box",
              "backgroundPosition": "25% 75%",
              "backgroundRepeat": "repeat-x",
              "backgroundSize": "contain",
              "bottom": "1px",
              "color": "red",
              "display": "inline-block",
              "flex": "grow",
              "flexDirection": "row",
              "grid": "100px / 200px",
              "gridArea": "auto",
              "gridAutoColumns": "min-content",
              "gridAutoFlow": "row dense",
              "gridAutoRows": "20cm",
              "gridColumn": "1 / 3",
              "gridColumnEnd": "span 3",
              "gridColumnGap": "$theme.sizing.scale800",
              "gridColumnStart": "span 2",
              "gridGap": "50px",
              "gridRow": "1",
              "gridRowEnd": "2",
              "gridRowStart": "-1",
              "gridTemplate": "1fr / 1fr",
              "gridTemplateAreas": "inherit",
              "gridTemplateColumns": "1fr 60px",
              "gridTemplateRows": "auto",
              "height": "100px",
              "justifyContent": "start",
              "justifyItems": "center",
              "justifySelf": "start",
              "left": "1px",
              "margin": "$theme.sizing.scale200",
              "marginBottom": "$theme.sizing.scale200",
              "marginLeft": "$theme.sizing.scale200",
              "marginRight": "$theme.sizing.scale200",
              "marginTop": "$theme.sizing.scale200",
              "maxHeight": "100px",
              "maxWidth": "100px",
              "minHeight": "100px",
              "minWidth": "100px",
              "padding": "$theme.sizing.scale200",
              "paddingBottom": "$theme.sizing.scale200",
              "paddingLeft": "$theme.sizing.scale200",
              "paddingRight": "$theme.sizing.scale200",
              "paddingTop": "$theme.sizing.scale200",
              "placeContent": "end center",
              "placeItems": "end center",
              "placeSelf": "center start",
              "position": "static",
              "right": "1px",
              "top": "1px",
              "width": "100px",
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;

exports[`Block does not throw if provided unknown font prop 1`] = `
<Block
  font="not-a-real-font"
>
  <Block
    font="not-a-real-font"
    forwardedRef={null}
  >
    <StyledBlock
      $as="div"
      $font="not-a-real-font"
      data-baseweb="block"
    >
      <MockStyledComponent
        $as="div"
        $font="not-a-real-font"
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "fontFamily": null,
              "fontSize": null,
              "fontWeight": null,
              "lineHeight": null,
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;

exports[`Block renders themed backgroundColor if provided 1`] = `
<Block
  backgroundColor="primary200"
>
  <Block
    backgroundColor="primary200"
    forwardedRef={null}
  >
    <StyledBlock
      $as="div"
      $backgroundColor="primary200"
      data-baseweb="block"
    >
      <MockStyledComponent
        $as="div"
        $backgroundColor="primary200"
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "backgroundColor": "$theme.colors.primary200",
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;

exports[`Block renders themed color if provided 1`] = `
<Block
  color="primary200"
>
  <Block
    color="primary200"
    forwardedRef={null}
  >
    <StyledBlock
      $as="div"
      $color="primary200"
      data-baseweb="block"
    >
      <MockStyledComponent
        $as="div"
        $color="primary200"
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "color": "$theme.colors.primary200",
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;

exports[`Block renders themed font if provided 1`] = `
<Block
  font="font200"
>
  <Block
    font="font200"
    forwardedRef={null}
  >
    <StyledBlock
      $as="div"
      $font="font200"
      data-baseweb="block"
    >
      <MockStyledComponent
        $as="div"
        $font="font200"
        data-baseweb="block"
        forwardedRef={null}
      >
        <div
          data-baseweb="block"
          styled-component="true"
          test-style={
            Object {
              "fontFamily": "$theme.typography.font200.fontFamily",
              "fontSize": "$theme.typography.font200.fontSize",
              "fontWeight": "$theme.typography.font200.fontWeight",
              "lineHeight": "$theme.typography.font200.lineHeight",
            }
          }
        >
          test
        </div>
      </MockStyledComponent>
    </StyledBlock>
  </Block>
</Block>
`;
